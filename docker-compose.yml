---
name: nestjs-stack

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_pass}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - app-net

  api:
    build:
      context: ./api
      # target: dev
      dockerfile: ./Dockerfile
    container_name: api
    # restart: unless-stopped
    restart: 'no'
    volumes:
      - ./api:/app
    env_file:
      - ./.env
    environment:
      ENVIRONMENT: local
      # Fallbacks so the stack is portable without .env
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-3000}
      DATABASE_URL: ${DATABASE_URL:-postgresql://app_user:app_pass@postgres:5432/app_db}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      JWT_SECRET: ${JWT_SECRET:-changeme}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      # If using TypeORM via individual envs instead of DATABASE_URL
      TYPEORM_HOST: postgres
      TYPEORM_PORT: 5432
      TYPEORM_USERNAME: ${POSTGRES_USER:-app_user}
      TYPEORM_PASSWORD: ${POSTGRES_PASSWORD:-app_pass}
      TYPEORM_DATABASE: ${POSTGRES_DB:-app_db}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-3000}:3000"
    networks:
      - app-net

  grpc:
    build:
      context: ./api
      # target: dev
      dockerfile: ./Dockerfile
    container_name: grpc
    # restart: unless-stopped
    restart: 'no'
    volumes:
      - ./api:/app
    env_file:
      - ./.env
    environment:
      ENVIRONMENT: local
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      # If your gRPC service also needs DB access, pass DATABASE_URL too
      DATABASE_URL: ${DATABASE_URL:-postgresql://app_user:app_pass@postgres:5432/app_db}
      GRPC_BIND: 0.0.0.0
      GRPC_PORT: ${GRPC_PORT:-50051}
      APP_MODE: "GRPC"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${GRPC_PORT:-50051}:50051"
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  pgdata: